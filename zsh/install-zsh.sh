#!/usr/bin/env zsh

# ZSH Configuration Install Script
# This script sets up a new .zshrc with selected modules from the dotfiles

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get the directory where this script is located
SCRIPT_DIR="${0:A:h}"
DOTS_DIR="${SCRIPT_DIR:h}"

# Module descriptions
typeset -A module_descriptions
module_descriptions=(
    "python"     "Python development utilities (pytouch, vvv, auto_activate_venv)"
    "git"        "Git helper functions (whatchanged, clone_subdir)"
    "llm"        "LLM integration utilities (suggest-commit, files-to-tokens)"
    "brew"       "Homebrew helpers (brew-list-installed)"
    "evalcache"  "Shell initialization caching"
    "whoa"       "Git safety wrapper (warns on 'git add .')"
    "arch"       "Arch Linux specific utilities"
    "cmus"       "cmus music player helpers"
    "deb"        "Debian/Ubuntu specific utilities"
    "ffmpeg"     "FFmpeg helper functions"
    "v"          "V language utilities"
)

# Core modules that are always loaded
core_modules=("00_prelude" "02_completion")

# Available optional modules (without .zsh extension)
optional_modules=("python" "git" "llm" "brew" "evalcache" "whoa" "arch" "cmus" "deb" "ffmpeg" "v")

# Function to backup existing .zshrc
backup_zshrc() {
    if [[ -f ~/.zshrc ]]; then
        local timestamp=$(date +%Y%m%d_%H%M%S)
        local backup_file=~/.zshrc.backup.${timestamp}
        echo -e "${YELLOW}Backing up existing .zshrc to ${backup_file}${NC}"
        cp ~/.zshrc "$backup_file"
    fi
}

# Function to display module selection menu
select_modules() {
    local selected_modules=()
    
    echo -e "\n${BLUE}Select modules to include in your zsh configuration:${NC}"
    echo -e "${YELLOW}(Space to select/deselect, Enter to confirm)${NC}\n"
    
    # Create a temporary array for selection state
    local -A selected
    
    # Interactive selection using a simple menu
    local current=0
    local key
    
    while true; do
        # Clear screen and redraw menu
        printf '\033[2J\033[H'
        echo -e "${BLUE}Select modules to include in your zsh configuration:${NC}"
        echo -e "${YELLOW}(Space to select/deselect, Enter to confirm, q to quit)${NC}\n"
        
        for i in {1..${#optional_modules}}; do
            local idx=$((i-1))
            local module=${optional_modules[$i]}
            local marker=" "
            [[ ${selected[$module]} == "yes" ]] && marker="✓"
            
            if [[ $idx -eq $current ]]; then
                echo -e "${GREEN}→ [$marker] ${module}${NC} - ${module_descriptions[$module]}"
            else
                echo -e "  [$marker] ${module} - ${module_descriptions[$module]}"
            fi
        done
        
        # Read single character
        read -k 1 key
        
        case $key in
            $'\n')  # Enter - confirm selection
                break
                ;;
            ' ')    # Space - toggle selection
                local module=${optional_modules[$((current+1))]}
                if [[ ${selected[$module]} == "yes" ]]; then
                    unset "selected[$module]"
                else
                    selected[$module]="yes"
                fi
                ;;
            A)      # Up arrow
                ((current > 0)) && ((current--))
                ;;
            B)      # Down arrow
                ((current < ${#optional_modules}-1)) && ((current++))
                ;;
            q|Q)    # Quit
                echo -e "\n${RED}Installation cancelled${NC}"
                exit 1
                ;;
        esac
    done
    
    # Convert selected modules to array
    for module in ${(k)selected}; do
        selected_modules+=($module)
    done
    
    echo -e "\n${GREEN}Selected modules: ${selected_modules[@]:-none}${NC}"
    echo $selected_modules
}

# Function to generate .zshrc content
generate_zshrc() {
    local selected_modules=($@)
    
    cat << 'EOF'
# ~/.zshrc - Generated by dotfiles install script
# This file sources zsh configuration modules from the dotfiles repository

# Path to dotfiles directory
DOTS_DIR="${HOME}/.dots"

# Core modules (always loaded)
zsh_core_modules=(
    "00_prelude"
    "02_completion"
)

# Optional modules (customize this array to add/remove modules)
zsh_modules=(
EOF

    # Add selected modules to the array
    for module in $selected_modules; do
        echo "    \"$module\""
    done
    
    cat << 'EOF'
)

# Function to load zsh modules
load_zsh_modules() {
    local module_path="${DOTS_DIR}/zsh"
    
    # Load core modules first
    for module in ${zsh_core_modules[@]}; do
        local file="${module_path}/${module}.zsh"
        if [[ -f "$file" ]]; then
            source "$file"
        else
            echo "Warning: Core module not found: $file" >&2
        fi
    done
    
    # Load prompt module only if starship is not available
    if ! command -v starship &>/dev/null; then
        local prompt_file="${module_path}/01_prompt.zsh"
        if [[ -f "$prompt_file" ]]; then
            source "$prompt_file"
        fi
    fi
    
    # Load optional modules
    for module in ${zsh_modules[@]}; do
        local file="${module_path}/${module}.zsh"
        if [[ -f "$file" ]]; then
            source "$file"
        else
            echo "Warning: Module not found: $file" >&2
        fi
    done
}

# Load all modules
load_zsh_modules

# Initialize starship if available
if command -v starship &>/dev/null; then
    export STARSHIP_CONFIG="${DOTS_DIR}/starship/starship.toml"
    eval "$(starship init zsh)"
fi

# User customizations can go below this line
# ----------------------------------------

EOF
}

# Main installation process
main() {
    echo -e "${BLUE}ZSH Configuration Installer${NC}"
    echo -e "${BLUE}===========================${NC}\n"
    
    # Check if we're in the right directory
    if [[ ! -d "${DOTS_DIR}/zsh" ]]; then
        echo -e "${RED}Error: This script must be run from within the dotfiles repository${NC}"
        exit 1
    fi
    
    # Backup existing .zshrc
    backup_zshrc
    
    # Select modules
    local selected_modules=($(select_modules))
    
    # Generate new .zshrc
    echo -e "\n${YELLOW}Generating new .zshrc...${NC}"
    generate_zshrc $selected_modules > ~/.zshrc
    
    # Show completion message
    echo -e "\n${GREEN}Installation complete!${NC}"
    echo -e "\n${YELLOW}Next steps:${NC}"
    echo "1. Review your new .zshrc: ${BLUE}cat ~/.zshrc${NC}"
    echo "2. Reload your shell: ${BLUE}source ~/.zshrc${NC}"
    echo "3. To modify modules later, edit the ${BLUE}zsh_modules${NC} array in ~/.zshrc"
    
    # Module-specific notes
    if [[ ${selected_modules[(ie)llm]} -le ${#selected_modules} ]]; then
        echo -e "\n${YELLOW}Note:${NC} The llm module requires: llm, jq, ttok, files-to-prompt"
    fi
    if [[ ${selected_modules[(ie)python]} -le ${#selected_modules} ]]; then
        echo -e "${YELLOW}Note:${NC} The python module works best with mise and uv installed"
    fi
}

# Run main function
main